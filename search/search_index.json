{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fastapi Framework","title":"FastAPI Framework"},{"location":"#fastapi-framework","text":"","title":"Fastapi Framework"},{"location":"environment/","text":"Environment There are some Environment Variables you should set if you want to use a Database or Redis. Database Name Default Description DB_DRIVER postgresql+asyncpg The Database Driver to use DB_HOST localhost Host of the DB Server DB_PORT 5432 Port of the Database DB_USERNAME postgres Database Username DB_PASSWORD Database Password DB_DATABASE Name of the Database Redis Name Default Description REDIS_HOST localhost Host of the Redis Server REDIS_PORT 63792 Port of the Redis Server Other Name Default Description LOG_LEVEL INFO Log Level e.g. DEBUG , INFO , WARNING or ERROR","title":"Environment"},{"location":"environment/#environment","text":"There are some Environment Variables you should set if you want to use a Database or Redis.","title":"Environment"},{"location":"environment/#database","text":"Name Default Description DB_DRIVER postgresql+asyncpg The Database Driver to use DB_HOST localhost Host of the DB Server DB_PORT 5432 Port of the Database DB_USERNAME postgres Database Username DB_PASSWORD Database Password DB_DATABASE Name of the Database","title":"Database"},{"location":"environment/#redis","text":"Name Default Description REDIS_HOST localhost Host of the Redis Server REDIS_PORT 63792 Port of the Redis Server","title":"Redis"},{"location":"environment/#other","text":"Name Default Description LOG_LEVEL INFO Log Level e.g. DEBUG , INFO , WARNING or ERROR","title":"Other"},{"location":"database/","text":"Database The Database Module is a Wrapper with asnyc Support for SQLAlchemy . Its based on PyDrocsid's Database Wrapper .","title":"Database"},{"location":"database/#database","text":"The Database Module is a Wrapper with asnyc Support for SQLAlchemy . Its based on PyDrocsid's Database Wrapper .","title":"Database"},{"location":"database/example/","text":"Example from fastapi_framework.database import db , select from fastapi import FastAPI , HTTPException from sqlalchemy import Integer , Column , String from typing import Union app = FastAPI () class User ( db . Base ): __tablename__ = \"users\" id : Union [ Column , int ] = Column ( Integer , primary_key = True ) name : Union [ Column , str ] = Column ( String ( 255 )) @staticmethod async def create ( name : str ) -> \"User\" : row = User ( name = name ) await db . add ( row ) return row @app . get ( \"/users\" ) async def get_users (): return await db . all ( select ( User )) @app . get ( \"/users/ {name} \" ) async def get_users ( name : str ): return await db . all ( select ( User ) . filter_by ( name = name )) @app . post ( \"/users/ {name} \" ) async def add_user ( name : str ) -> User : if await db . exists ( select ( User ) . filter_by ( name = name )): raise HTTPException ( 409 , \"Username already used\" ) user = await User . create ( name ) await db . commit () return user","title":"Example"},{"location":"database/example/#example","text":"from fastapi_framework.database import db , select from fastapi import FastAPI , HTTPException from sqlalchemy import Integer , Column , String from typing import Union app = FastAPI () class User ( db . Base ): __tablename__ = \"users\" id : Union [ Column , int ] = Column ( Integer , primary_key = True ) name : Union [ Column , str ] = Column ( String ( 255 )) @staticmethod async def create ( name : str ) -> \"User\" : row = User ( name = name ) await db . add ( row ) return row @app . get ( \"/users\" ) async def get_users (): return await db . all ( select ( User )) @app . get ( \"/users/ {name} \" ) async def get_users ( name : str ): return await db . all ( select ( User ) . filter_by ( name = name )) @app . post ( \"/users/ {name} \" ) async def add_user ( name : str ) -> User : if await db . exists ( select ( User ) . filter_by ( name = name )): raise HTTPException ( 409 , \"Username already used\" ) user = await User . create ( name ) await db . commit () return user","title":"Example"},{"location":"database/insert_delete_modify/","text":"Insert, Delete and Modify Data Insert Data With db.add you can insert Date into the Database from fastapi_framework.database import db class MyModel ( db . Base ): # The Model Code pass async def main (): obj : MyModel = MyModel ( x = 1 ) await db . add ( obj ) Delete Data With db.delete you can delete Data from your Database from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): model : MyModel = await select ( MyModel ) . filter_by ( x = 1 ) await db . delete ( model ) Modify Data You can modify Data in your Database by change the Model Class Attribute from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): model : MyModel = await select ( MyModel ) . filter_by ( x = 1 ) model . x = 1","title":"Insert, Delete and Modify Data"},{"location":"database/insert_delete_modify/#insert-delete-and-modify-data","text":"","title":"Insert, Delete and Modify Data"},{"location":"database/insert_delete_modify/#insert-data","text":"With db.add you can insert Date into the Database from fastapi_framework.database import db class MyModel ( db . Base ): # The Model Code pass async def main (): obj : MyModel = MyModel ( x = 1 ) await db . add ( obj )","title":"Insert Data"},{"location":"database/insert_delete_modify/#delete-data","text":"With db.delete you can delete Data from your Database from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): model : MyModel = await select ( MyModel ) . filter_by ( x = 1 ) await db . delete ( model )","title":"Delete Data"},{"location":"database/insert_delete_modify/#modify-data","text":"You can modify Data in your Database by change the Model Class Attribute from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): model : MyModel = await select ( MyModel ) . filter_by ( x = 1 ) model . x = 1","title":"Modify Data"},{"location":"database/models/","text":"Models The Tutorial for SQLAlchemy Models can befound here . A Model class should inherit from fastapi_framework.db.Base To create the Models Async in your Code you could add this async function to your models: from fastapi_framework import db class MyModel ( db . Base ): # your model code @staticmethod async def create ( param : int , param2 : str ) -> \"MyModel\" : row = MyModel ( param = param , param2 = param2 ) await db . add ( row ) return row","title":"Models"},{"location":"database/models/#models","text":"The Tutorial for SQLAlchemy Models can befound here . A Model class should inherit from fastapi_framework.db.Base To create the Models Async in your Code you could add this async function to your models: from fastapi_framework import db class MyModel ( db . Base ): # your model code @staticmethod async def create ( param : int , param2 : str ) -> \"MyModel\" : row = MyModel ( param = param , param2 = param2 ) await db . add ( row ) return row","title":"Models"},{"location":"database/query/","text":"Query Function for Database Query are from fastapi_framework.database import select , filter_by Select from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Selects all from the MyModel table Filter By filter_by(Model, criteria) is a shortcut for select(Model).filer_by(criteria) from fastapi_framework.database import db , select , filter_by class MyModel ( db . Base ): # The Model Code pass async def main (): query = filter_by ( MyModel , id = 1 ) # Selects all from the MyModel table where id is 1 # Same here: query = select ( MyModel ) . filter_by ( id = 1 ) Execute Querys Get First Element Returns the first Result for the Query. Could be None from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query result : MyModel = await db . first ( query ) Get All Element Returns all results for the query. Could be [] from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query result : list [ MyModel ] = await db . all ( query ) Check Exists Checks if data for this query exists from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query exists : bool = await db . exists ( query ) Count Results Returns count of matching rows for the query from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query count : int = await db . count ( query )","title":"Query"},{"location":"database/query/#query","text":"Function for Database Query are from fastapi_framework.database import select , filter_by","title":"Query"},{"location":"database/query/#select","text":"from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Selects all from the MyModel table","title":"Select"},{"location":"database/query/#filter-by","text":"filter_by(Model, criteria) is a shortcut for select(Model).filer_by(criteria) from fastapi_framework.database import db , select , filter_by class MyModel ( db . Base ): # The Model Code pass async def main (): query = filter_by ( MyModel , id = 1 ) # Selects all from the MyModel table where id is 1 # Same here: query = select ( MyModel ) . filter_by ( id = 1 )","title":"Filter By"},{"location":"database/query/#execute-querys","text":"","title":"Execute Querys"},{"location":"database/query/#get-first-element","text":"Returns the first Result for the Query. Could be None from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query result : MyModel = await db . first ( query )","title":"Get First Element"},{"location":"database/query/#get-all-element","text":"Returns all results for the query. Could be [] from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query result : list [ MyModel ] = await db . all ( query )","title":"Get All Element"},{"location":"database/query/#check-exists","text":"Checks if data for this query exists from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query exists : bool = await db . exists ( query )","title":"Check Exists"},{"location":"database/query/#count-results","text":"Returns count of matching rows for the query from fastapi_framework.database import db , select class MyModel ( db . Base ): # The Model Code pass async def main (): query = select ( MyModel ) # Your Query count : int = await db . count ( query )","title":"Count Results"}]}